import Head from "next/head";
import { TransformWrapper, TransformComponent } from "react-zoom-pan-pinch";
import {
  DndContext,
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
  DragOverlay
} from "@dnd-kit/core";
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  rectSortingStrategy
} from "@dnd-kit/sortable";
import { SetStateAction, useState } from "react";

import BlobItem from "./../components/blob/blobItem";

export default function Home() {
  const [activeId, setActiveId] = useState(null);
  const [items, setItems] = useState([
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "10",
    "11",
    "12",
    "13",
    "14",
    "15",
    "16",
    "17",
    "18",
    "19",
    "20",
    "21",
    "22",
    "23",
    "24",
    "25",
    "26",
    "27",
    "28",
    "29"
  ]);

  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates
    })
  );

  const handleDragStart = (event: any) => {

    setActiveId(event.active.id);
  };

  const handleDragEnd = (event: any) => {
    setActiveId(null);
    const { active, over } = event;

    if (active.id !== over.id) {
      setItems((items) => {
        const oldIndex = items.indexOf(active.id);
        const newIndex = items.indexOf(over.id);

        return arrayMove(items, oldIndex, newIndex);
      });
    }
  };
  
  return (
    <>
      <Head>
        <title>Three6ty1's Blob</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="font-[Helvetica]">
        <TransformWrapper
          panning={{disabled: activeId ? true : false}}
        >
          <TransformComponent>
            <div className="w-screen h-screen flex p-5 justify-center align-middle items-start">
            {
              <DndContext
                sensors={sensors}
                collisionDetection={closestCenter}
                onDragEnd={handleDragEnd}
                onDragStart={handleDragStart}
                
              >
                <div className="flex h-full w-full bg-black justify-center items-center align-middle col-span-1">
                  <div className="grid grid-cols-8">
                    <SortableContext items={items} strategy={rectSortingStrategy}>
                      {items.map((id) => (
                        <BlobItem key={id} id={id} value={id} />
                      ))}
                    </SortableContext>
                  </div>
                </div>
              </DndContext>
            }
            </div>
          </TransformComponent>
        </TransformWrapper>
      </main>
    </>
  );
}
