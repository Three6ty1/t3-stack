import Head from "next/head";
import { useEffect, useState } from "react";

import BlobItem from "./../components/blob/blobItem";
import { GetServerSideProps } from "next";
import { getAllBlobs } from "~/server/api/routers/blob";
import { Blob, type BlobTags } from "@prisma/client";
import CreateBlob from "~/components/blob/createBlob";
import BlobModal from "~/components/blob/blobModal";
import { api } from "~/utils/api";
import BlobFilter from "~/components/blob/blobFilter";
import Login from "~/components/blob/login";
import { createClient } from "~/utils/supabase/client";
import SignOut from "~/components/blob/signout";

type Props = {
  ssrBlobs: Blob[];
};

export default function Home({ ssrBlobs }: Props) {
  const initBlob: Blob = {
    id: -1,
    date: "",
    edit: null,
    title: "",
    description: null,
    tags: [],
    images: [],
    videos: [],
    likes: -1,
  };
  const [selectedBlob, setSelectedBlob] = useState<Blob>(initBlob);
  const [isShowModal, setIsShowModal] = useState(false);
  const [blobs, setBlobs] = useState(ssrBlobs ? ssrBlobs : []);
  const [filter, setFilter] = useState({tags: new Set<BlobTags>([])});
  const getAllQuery = api.useUtils().blob.getAll;
  const supabase = createClient();
  const [userId, setUserId] = useState('');

  useEffect(() => {
    getUser();
  }, [userId])

  const getUser = async () => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (user !== null) {
        setUserId(user.id);
      } else {
        setUserId('');
      }
    }
    catch (e) {
    }
  }

  const handleBlobCreate = () => {
    setTimeout(() => getAllQuery.fetch().then((data) => {
      setBlobs(data);
      // Reassign the selected blob to the newly changed one
    }), 300);
  }

  const handleModalOpen = (blob: Blob) => {
    setSelectedBlob(blob);
    setTimeout(
      () =>
        (
          document.getElementById("blob_modal")! as HTMLDialogElement
        ).showModal(),
      200,
    );
    setIsShowModal(true);
  };

  const handleModalClose = () => {
    setSelectedBlob(initBlob);
    setIsShowModal(false);
  };

  const handleBlobDelete = () => {
    setTimeout(
      () =>
        getAllQuery.fetch().then((data) => {
          setBlobs(data);
          // Reassign the selected blob to the newly changed one
        }),
      300,
    );
  }

  const handleBlobEdit = () => {
    setTimeout(
      () =>
        getAllQuery.fetch().then((data) => {
          setBlobs(data);
          // Reassign the selected blob to the newly changed one
          setSelectedBlob(data.find((blob) => blob.id == selectedBlob.id)!);
        }),
      200,
    );
  };

  const handleFilter = (filter: Set<BlobTags>) => {
    setFilter({tags: filter});
  }

  return (
    <>
      <Head>
        <title>Three6ty1's Blob</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen w-full items-start justify-center align-middle font-[Helvetica]">
        
        {isShowModal && (
          <BlobModal
            blob={selectedBlob}
            handleBlobEdit={handleBlobEdit}
            handleModalClose={handleModalClose}
            handleBlobDelete={handleBlobDelete}
          />
        )}
        <div className="absolute right-6 top-6">
          <CreateBlob handleBlobCreate={handleBlobCreate}/>
          {userId.length === 0 ? <Login /> : <SignOut />}
          <BlobFilter filter={filter} handleFilter={(filter: Set<BlobTags>) => handleFilter(filter)} />
        </div>

        <div className="flexitems-start w-full justify-center bg-black align-middle">
          <div className="flex flex-row flex-wrap w-full justify-start">
          {/* <div className="grid grid-cols-12"> */}
            {blobs?.map((blob) => (
              <BlobItem
                key={blob.id}
                id={blob.id}
                blob={blob}
                isFilter={(new Set([...filter.tags].filter(x => blob.tags.includes(x)))).size > 0}
                handleModalOpen={(blob: Blob) => handleModalOpen(blob)}
              />
            ))}
          </div>
        </div>
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async () => {
  const blobs = await getAllBlobs();

  return {
    props: {
      ssrBlobs: blobs,
    },
  };
};
